{"version":3,"sources":["store/actions.js","utils/api.js","store/constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Header.js","containers/App.js","serviceWorker.js","store/reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","res","json","data","payload","catch","error","Card","id","name","email","className","alt","src","CardList","robots","map","robot","key","SearchBox","searchText","searchChange","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","info","this","setState","Component","Header","nextProps","nextState","console","log","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8e057021.chunk.js","sourcesContent":["import { apiCall } from '../utils/api'\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants'\n\n\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  apiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const apiCall = (link) => fetch(link).then(res=>res.json())","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\n\n//pure component\nconst Card = ({ id, name, email }) => {\n    return (\n        <div className=\" bg-light-green dib br3 ma2 pa3 grow bw2 shadow-5\">\n            <img alt=\"robot_image\" src={`https://robohash.org/${id}?size=200x200`}></img>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    )\n}\n\nexport default Card;","import React from \"react\";\nimport Card from './Card';\n\n//pure component\nconst CardList = ({ robots }) => {\n\n    // if(true){\n    //     return new Error(\"something goes wrong!\");\n    // }\n\n    return (\n        robots.map(robot =>\n            <Card\n                key={robot.id}\n                id={robot.id}\n                name={robot.name}\n                email={robot.email}\n            />)\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchText, searchChange }) => {\n    return (\n        <div className=\"pa2\">\n            <input\n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\"\n                placeholder=\"Search Robot...\"\n                onChange={searchChange}\n            />\n        </div>\n    )\n}\n\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflow: \"scroll\", border: \"solid 5px black\", height: \"600px\" }}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error,info){\n        this.setState({\n            hasError:true\n        })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooops, something happens!</h1>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, {Component} from 'react';\n// import CounterButton from './CounterButton';\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false\n  }\n  render() {\n    console.log('header')\n    return (\n      <div>\n        <h1 className='f1'>RoboFriends</h1>\n        {/* <CounterButton /> */}\n      </div>\n    );\n  }\n};\n\nexport default Header;","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../store/actions';\n\nimport './App.css';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundary';\nimport Header from '../components/Header';\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const { robots, searchField, onSearchChange, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()))\n\n\n        return (\n            <div className=\"tc\">\n                <Header />\n                <SearchBox searchChange={onSearchChange} />\n                <Scroll>\n                    {isPending ? <h1>Loading...</h1> :\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundry>\n                    }\n                </Scroll>\n            </div>\n        )\n\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCHFIELD:\n            return Object.assign({}, state, { searchField: action.payload })\n        default:\n            return state\n    }\n}\n\nconst initialStateRobots = {\n    robots: [],\n    isPending: true\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload })\n        default:\n            return state\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { requestRobots, searchRobots } from './store/reducers'\n\nimport './index.css';\n\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({ requestRobots, searchRobots });\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}